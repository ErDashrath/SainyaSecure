# Generated by Django 5.2.6 on 2025-09-13 13:28

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('messaging', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='P2PSyncStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_syncing', models.BooleanField(default=False)),
                ('sync_mode', models.CharField(choices=[('FULL', 'Full Sync'), ('INCREMENTAL', 'Incremental Sync'), ('PRIORITY', 'Priority Sync Only'), ('EMERGENCY', 'Emergency Sync')], default='INCREMENTAL', max_length=15)),
                ('pending_messages', models.IntegerField(default=0)),
                ('synced_messages', models.IntegerField(default=0)),
                ('failed_messages', models.IntegerField(default=0)),
                ('sync_progress_percent', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('messages_per_second', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
                ('bytes_per_second', models.BigIntegerField(default=0)),
                ('average_message_size', models.IntegerField(default=0)),
                ('bandwidth_used_kbps', models.IntegerField(default=0)),
                ('bandwidth_limit_kbps', models.IntegerField(blank=True, null=True)),
                ('connection_count', models.IntegerField(default=0)),
                ('active_peer_count', models.IntegerField(default=0)),
                ('consecutive_failures', models.IntegerField(default=0)),
                ('last_error_message', models.TextField(blank=True)),
                ('last_error_at', models.DateTimeField(blank=True, null=True)),
                ('last_sync_start', models.DateTimeField(blank=True, null=True)),
                ('last_sync_complete', models.DateTimeField(blank=True, null=True)),
                ('estimated_completion', models.DateTimeField(blank=True, null=True)),
                ('auto_sync_enabled', models.BooleanField(default=True)),
                ('sync_priority_threshold', models.CharField(choices=[('CRITICAL', 'Critical'), ('HIGH', 'High'), ('NORMAL', 'Normal'), ('LOW', 'Low')], default='NORMAL', max_length=8)),
            ],
            options={
                'verbose_name': 'P2P Sync Status',
                'verbose_name_plural': 'P2P Sync Statuses',
                'db_table': 'p2p_sync_status',
            },
        ),
        migrations.CreateModel(
            name='PeerConnection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('connection_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('connection_type', models.CharField(choices=[('DIRECT', 'Direct Connection'), ('RELAY', 'Relayed Connection'), ('MESH', 'Mesh Network'), ('SATELLITE', 'Satellite Link'), ('RADIO', 'Radio Frequency')], default='DIRECT', max_length=10)),
                ('status', models.CharField(choices=[('CONNECTED', 'Connected'), ('CONNECTING', 'Connecting'), ('DISCONNECTED', 'Disconnected'), ('FAILED', 'Connection Failed'), ('BLOCKED', 'Blocked')], default='CONNECTING', max_length=12)),
                ('local_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('remote_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('local_port', models.IntegerField(blank=True, null=True)),
                ('remote_port', models.IntegerField(blank=True, null=True)),
                ('latency_ms', models.IntegerField(blank=True, help_text='Round-trip latency in milliseconds', null=True)),
                ('bandwidth_kbps', models.IntegerField(blank=True, help_text='Available bandwidth in Kbps', null=True)),
                ('packet_loss_percent', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('signal_strength', models.IntegerField(blank=True, help_text='Signal strength (0-100)', null=True)),
                ('security_level', models.CharField(choices=[('TRUSTED', 'Fully Trusted'), ('VERIFIED', 'Verified'), ('UNVERIFIED', 'Unverified'), ('SUSPICIOUS', 'Suspicious'), ('BLOCKED', 'Blocked')], default='UNVERIFIED', max_length=12)),
                ('trust_score', models.DecimalField(decimal_places=2, default=0.0, help_text='Trust score (0.0-1.0)', max_digits=3)),
                ('encryption_enabled', models.BooleanField(default=True)),
                ('certificate_verified', models.BooleanField(default=False)),
                ('can_relay', models.BooleanField(default=True, help_text='Can this peer relay messages')),
                ('max_relay_hops', models.IntegerField(default=3)),
                ('relay_priority', models.IntegerField(default=1, help_text='Relay priority (1=highest)')),
                ('messages_sent', models.IntegerField(default=0)),
                ('messages_received', models.IntegerField(default=0)),
                ('bytes_sent', models.BigIntegerField(default=0)),
                ('bytes_received', models.BigIntegerField(default=0)),
                ('connection_attempts', models.IntegerField(default=0)),
                ('successful_connections', models.IntegerField(default=0)),
                ('first_connected_at', models.DateTimeField(blank=True, null=True)),
                ('last_connected_at', models.DateTimeField(blank=True, null=True)),
                ('last_seen_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('distance_meters', models.IntegerField(blank=True, help_text='Approximate distance between devices', null=True)),
                ('last_known_location_lat', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('last_known_location_lon', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
            ],
            options={
                'verbose_name': 'Peer Connection',
                'verbose_name_plural': 'Peer Connections',
                'db_table': 'peer_connections',
            },
        ),
        migrations.CreateModel(
            name='SyncConflict',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conflict_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('conflict_type', models.CharField(choices=[('MESSAGE_EDIT', 'Message Edit Conflict'), ('MESSAGE_DELETE', 'Message Delete Conflict'), ('TIMESTAMP', 'Timestamp Conflict'), ('DUPLICATE', 'Duplicate Message'), ('ORDERING', 'Message Ordering'), ('PERMISSION', 'Permission Conflict')], max_length=15)),
                ('local_version_data', models.JSONField(help_text='Local version of conflicting data')),
                ('remote_version_data', models.JSONField(help_text='Remote version of conflicting data')),
                ('conflict_description', models.TextField()),
                ('resolution_status', models.CharField(choices=[('DETECTED', 'Conflict Detected'), ('ANALYZING', 'Analyzing Conflict'), ('PENDING_REVIEW', 'Pending Manual Review'), ('RESOLVED_AUTO', 'Resolved Automatically'), ('RESOLVED_MANUAL', 'Resolved Manually'), ('UNRESOLVED', 'Unresolved')], default='DETECTED', max_length=15)),
                ('resolution_strategy', models.CharField(blank=True, max_length=20)),
                ('resolved_version_data', models.JSONField(default=dict, help_text='Final resolved version')),
                ('reviewer_notes', models.TextField(blank=True)),
                ('review_priority', models.CharField(choices=[('CRITICAL', 'Critical'), ('HIGH', 'High'), ('NORMAL', 'Normal'), ('LOW', 'Low')], default='NORMAL', max_length=8)),
                ('detected_at', models.DateTimeField(auto_now_add=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('review_deadline', models.DateTimeField(blank=True, null=True)),
                ('affects_security', models.BooleanField(default=False)),
                ('affects_mission_critical', models.BooleanField(default=False)),
                ('estimated_impact_level', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('CRITICAL', 'Critical')], default='LOW', max_length=8)),
            ],
            options={
                'verbose_name': 'Sync Conflict',
                'verbose_name_plural': 'Sync Conflicts',
                'db_table': 'sync_conflicts',
                'ordering': ['-detected_at'],
            },
        ),
        migrations.CreateModel(
            name='NetworkTopology',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topology_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('snapshot_time', models.DateTimeField(auto_now_add=True)),
                ('total_nodes', models.IntegerField(default=0)),
                ('connected_nodes', models.IntegerField(default=0)),
                ('total_connections', models.IntegerField(default=0)),
                ('network_diameter', models.IntegerField(default=0, help_text='Maximum shortest path between any two nodes')),
                ('average_path_length', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('connectivity_ratio', models.DecimalField(decimal_places=2, default=0.0, help_text='Connected nodes / total nodes', max_digits=3)),
                ('clustering_coefficient', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('network_resilience_score', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('has_partitions', models.BooleanField(default=False)),
                ('partition_count', models.IntegerField(default=1)),
                ('largest_partition_size', models.IntegerField(default=0)),
                ('isolated_nodes', models.IntegerField(default=0)),
                ('average_latency_ms', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
                ('total_bandwidth_kbps', models.BigIntegerField(default=0)),
                ('message_delivery_success_rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('coverage_area_km2', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('geographic_center_lat', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('geographic_center_lon', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('adjacency_matrix', models.JSONField(default=dict, help_text='Network adjacency matrix')),
                ('routing_table', models.JSONField(default=dict, help_text='Optimal routing paths')),
                ('critical_nodes', models.JSONField(default=list, help_text='Nodes critical for network connectivity')),
            ],
            options={
                'verbose_name': 'Network Topology',
                'verbose_name_plural': 'Network Topologies',
                'db_table': 'network_topology',
                'ordering': ['-snapshot_time'],
                'indexes': [models.Index(fields=['snapshot_time'], name='network_top_snapsho_eb2899_idx'), models.Index(fields=['has_partitions', 'partition_count'], name='network_top_has_par_a75151_idx'), models.Index(fields=['connectivity_ratio'], name='network_top_connect_ecac89_idx')],
            },
        ),
        migrations.CreateModel(
            name='OfflineMessageQueue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('queue_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('priority', models.CharField(choices=[('CRITICAL', 'Critical'), ('HIGH', 'High'), ('NORMAL', 'Normal'), ('LOW', 'Low')], default='NORMAL', max_length=8)),
                ('status', models.CharField(choices=[('PENDING', 'Pending Sync'), ('SYNCING', 'Currently Syncing'), ('SYNCED', 'Successfully Synced'), ('FAILED', 'Sync Failed'), ('CONFLICT', 'Sync Conflict'), ('EXPIRED', 'Expired')], default='PENDING', max_length=8)),
                ('sync_attempts', models.IntegerField(default=0)),
                ('max_sync_attempts', models.IntegerField(default=5)),
                ('retry_delay_seconds', models.IntegerField(default=60)),
                ('has_conflict', models.BooleanField(default=False)),
                ('conflict_resolution_strategy', models.CharField(choices=[('LOCAL_WINS', 'Local Version Wins'), ('REMOTE_WINS', 'Remote Version Wins'), ('MERGE', 'Attempt Merge'), ('MANUAL', 'Manual Resolution')], default='MANUAL', max_length=20)),
                ('queued_at', models.DateTimeField(auto_now_add=True)),
                ('last_sync_attempt_at', models.DateTimeField(blank=True, null=True)),
                ('next_sync_attempt_at', models.DateTimeField(blank=True, null=True)),
                ('synced_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('last_error', models.TextField(blank=True)),
                ('error_count', models.IntegerField(default=0)),
                ('sync_context', models.JSONField(default=dict, help_text='Additional sync context data')),
                ('checksum', models.CharField(help_text='Message checksum for integrity verification', max_length=64)),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sync_queue_entries', to='messaging.conversation')),
            ],
            options={
                'verbose_name': 'Offline Message Queue Entry',
                'verbose_name_plural': 'Offline Message Queue Entries',
                'db_table': 'offline_message_queue',
                'ordering': ['-priority', 'queued_at'],
            },
        ),
    ]
